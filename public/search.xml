<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kafka 学习-入门演示</title>
      <link href="/2019/01/15/learning-kafka-01/"/>
      <url>/2019/01/15/learning-kafka-01/</url>
      
        <content type="html"><![CDATA[<h2 id="Kafka-学习-入门演示"><a href="#Kafka-学习-入门演示" class="headerlink" title="Kafka 学习-入门演示"></a>Kafka 学习-入门演示</h2><blockquote><p>Kafka 入门案例演示，使用kafka的生产者向消费者发送消息</p></blockquote><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul><li><a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/2.1.0/kafka_2.11-2.1.0.tgz" target="_blank" rel="noopener">官网下载 kafka_2.11-2.1.0.tgz</a></li><li>使用命令 <code>tar -zxvf kafka_2.11-2.1.0.tgz</code> 解压</li></ul><p><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1547358484.png" alt=""></p><h3 id="启动kafaka"><a href="#启动kafaka" class="headerlink" title="启动kafaka"></a>启动kafaka</h3><ul><li>第一步启动 <code>zookeeper</code> 此处使用 <code>kafka</code> 内置自带的 <code>zookeeper</code></li></ul><pre class=" language-shell"><code class="language-shell">./bin/zookeeper-server-start.sh config/zookeeper.properties</code></pre><ul><li>启动 <code>kafka</code> 服务</li></ul><pre class=" language-shell"><code class="language-shell">./bin/kafka-server-start.sh config/server.properties</code></pre><ul><li>创建一个 topic</li></ul><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/kafka<span class="token operator">-</span>topics<span class="token punctuation">.</span>sh <span class="token operator">--</span>zookeeper localhost<span class="token operator">:</span><span class="token number">2181</span> <span class="token operator">--</span>creat <span class="token operator">--</span>topic test <span class="token operator">--</span>partitions <span class="token number">3</span> <span class="token operator">--</span>replication<span class="token operator">-</span>fact</code></pre><ul><li>订阅 topic</li></ul><pre class=" language-shell"><code class="language-shell">./kafka-topics.sh --zookeeper localhost:2181 --describe --topic test</code></pre><ul><li>启动 consumer</li></ul><pre class=" language-shell"><code class="language-shell">./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</code></pre><ul><li>启动 producer</li></ul><pre class=" language-shell"><code class="language-shell">./kafka-console-producer.sh --broker-list localhost:9092 --topic test</code></pre><ul><li>生产者发送消息</li></ul><p><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1547359118.png" alt=""></p><ul><li>消费者接收消息</li></ul><p><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1547359210.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> 中间件 </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛顿逐步逼近法求平方根</title>
      <link href="/2019/01/15/Java-niudun-square-root/"/>
      <url>/2019/01/15/Java-niudun-square-root/</url>
      
        <content type="html"><![CDATA[<h2 id="算法题：牛顿逐步逼近法求平方根"><a href="#算法题：牛顿逐步逼近法求平方根" class="headerlink" title="算法题：牛顿逐步逼近法求平方根"></a>算法题：牛顿逐步逼近法求平方根</h2><h5 id="牛顿逐步逼近法求平方根：假设对-x-的平方根，有一个猜测值-y，如果一步一步的计算-x-和-x-y-的平均值，那么这个平均值将会越来越接近-x-的平方根。"><a href="#牛顿逐步逼近法求平方根：假设对-x-的平方根，有一个猜测值-y，如果一步一步的计算-x-和-x-y-的平均值，那么这个平均值将会越来越接近-x-的平方根。" class="headerlink" title="牛顿逐步逼近法求平方根：假设对 x 的平方根，有一个猜测值 y，如果一步一步的计算 x 和 x/y 的平均值，那么这个平均值将会越来越接近 x 的平方根。"></a>牛顿逐步逼近法求平方根：假设对 x 的平方根，有一个猜测值 y，如果一步一步的计算 x 和 x/y 的平均值，那么这个平均值将会越来越接近 x 的平方根。</h5><ul><li>假设求 <code>x</code> 的平方根</li><li>猜测 <code>x</code> 的平方根是 <code>y</code>，第一次的默认值为 1</li><li>求平均值 <code>v = (x+x/y)/2</code></li><li>如果 <code>v*v-x</code> 的绝对值小于一个误差值，则认为 <code>v</code> 就是 x 的平方根</li><li>否则 <code>y=v</code> 然后递归继续求值</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>alan<span class="token punctuation">.</span>leetcode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 使用 牛顿法 求平方根 * @author Alan Wang * @date 2019/1/6 22:02 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SquareRoot</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 最大误差值     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> DEVIATION <span class="token operator">=</span> <span class="token number">0.0000000000001</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 计算 x 的平方根     * @param x 求 x 的平方根     * @param y 猜测 x 的平方根为 y     * @return 返回平方根     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> v <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">/</span>y <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 求误差</span>        <span class="token keyword">double</span> w <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token operator">*</span>v<span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token operator">*</span>v<span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token operator">*</span>v<span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果v的绝对值小于最大误差值，则任务平均值 b 是 x 的平方根</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">&lt;</span> DEVIATION<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>运行结果</p></blockquote><p><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1546785164.png" alt="平方根"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 实现二分查找算法</title>
      <link href="/2019/01/15/Java-binary-search/"/>
      <url>/2019/01/15/Java-binary-search/</url>
      
        <content type="html"><![CDATA[<h2 id="算法题：Java实现二分查找"><a href="#算法题：Java实现二分查找" class="headerlink" title="算法题：Java实现二分查找"></a>算法题：Java实现二分查找</h2><p>二分查找算法的前提条件</p><ul><li>必须有序（单调递增或递减）：因为每次都有通过判断大小来确定查找范围</li><li>存在明确上下界：因为每次查找都要把数组一分为二</li><li>必须通过索引能访问：因为确定了上限下限，必须得通过中间值的索引去去中间值的大小</li></ul><p>综上所述：有序数组是最适合使用 <code>二分查找算法</code></p><p>因为二分查找算法每一次都会减少一半的数据(每一次都除以二) 所以二分查找的 <code>时间复杂度</code> 为 <code>O(logN)</code></p><p>代码实现</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 二分查找 *      前提: 有序 *      时间复杂度: O(logN) * @author Alan Wang * @date 2018/12/5 21:59 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">search</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查询给定数组种是否存则某个值val     * @param val     * @return     */</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            time <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 取中间值</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>right<span class="token operator">+</span>left<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>left<span class="token operator">+</span><span class="token string">"--------第"</span><span class="token operator">+</span>time<span class="token operator">+</span><span class="token string">"次查找，中间值："</span><span class="token operator">+</span>mid<span class="token operator">+</span><span class="token string">"---------"</span><span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行结果</p><p><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1546602353.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2019/01/15/DesignPattern-StaticProxy/"/>
      <url>/2019/01/15/DesignPattern-StaticProxy/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式-代理模式-静态"><a href="#设计模式-代理模式-静态" class="headerlink" title="设计模式-代理模式(静态)"></a>设计模式-代理模式(静态)</h2><p><strong>代理模式(Proxy)</strong>: 客户端直接使用代理对象，而不需要关心真实对象，此时代理模式在 <code>客户端</code> 和 <code>真实对象</code> 之间起到一个中介的作用</p><blockquote><p>1、代理对象包含真实对象，客户端使用的是代理对象的方法，和真实对象没有直接关系；<br>2、代理模式的职责：把不是真实对象该做的事从真实对象中分离—-职责清晰</p></blockquote><p>静态代理：在程序运行之前就已经存在代理类的字节码文件，代理对象和真实对象的关系在运行前就确定了。</p><p>可以通过 <code>租客</code> -&gt; <code>中介</code> -&gt; <code>房东</code> 的例子来理解代理模式，如下图：</p><p><a href="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1546173964.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1546173964.png" alt=""></a></p><blockquote><p>房东类和房东接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 房东的接口类，房东类和中介类都需要实现该接口， * 该接口中定义了只有房东才能作的实现，（即真实对象要做的处理） * @author Alan Wang * @date 2018/12/30 20:54 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LandlordInterface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 房东收房租     */</span>    <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 房东签合同     */</span>    <span class="token keyword">void</span> <span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 房东类 * @author Alan Wang * @date 2018/12/30 20:52 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Landlord</span> <span class="token keyword">implements</span> <span class="token class-name">LandlordInterface</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是房东，我来收租。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是房东，我来签合同。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>中介类（代理类）</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 代理类：租房中介 * * @author Alan Wang * @date 2018/12/30 20:57 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RentalAgencyProxy</span> <span class="token keyword">implements</span> <span class="token class-name">LandlordInterface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 中介类中包含房东对象引用（可以有多个，房东列表）</span>    <span class="token keyword">private</span> Landlord landlord<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化中介对象，并设置相关的房东     */</span>    <span class="token keyword">public</span> <span class="token function">RentalAgencyProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        landlord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Landlord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 中介带租客看房子     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">watchHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是中介：我陪租客看房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 中介带租客谈价格     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talkPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是中介：我陪租客谈价格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 中介给租客钥匙     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">giveKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是中介：我给租客钥匙..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">///////下面是真实对象做的事</span>    <span class="token comment" spellcheck="true">/**     * 通过房东对象，调用房东的收房租方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        landlord<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过房东对象，调用房东的签合同方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        landlord<span class="token punctuation">.</span><span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>租客类（客户端）</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 租客类 * @author Alan Wang * @date 2018/12/30 20:52 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tenants</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 租客找到一个中介         */</span>        RentalAgencyProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RentalAgencyProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 看房子</span>        proxy<span class="token punctuation">.</span><span class="token function">watchHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 谈价格</span>        proxy<span class="token punctuation">.</span><span class="token function">talkPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 签合同</span>        proxy<span class="token punctuation">.</span><span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 交房租</span>        proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 拿钥匙</span>        proxy<span class="token punctuation">.</span><span class="token function">giveKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>执行结果</p></blockquote><p><a href="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1546175951.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1546175951.png" alt=""></a></p><p><a href="https://github.com/AlanWangBit/Java-Advanced/tree/master/java-design-pattern/src/main/java/com/alan/proxy/agency" target="_blank" rel="noopener">源码地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode算法题：判断链表是否包含环</title>
      <link href="/2019/01/15/LeetCodeHasCircularInLinkeList/"/>
      <url>/2019/01/15/LeetCodeHasCircularInLinkeList/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode算法题：判断链表是否包含环"><a href="#LeetCode算法题：判断链表是否包含环" class="headerlink" title="LeetCode算法题：判断链表是否包含环"></a>LeetCode算法题：判断链表是否包含环</h2><p>本题为 <a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">LeetCode</a> 上的一道题目: 描述如下图，</p><blockquote><p>如果下图的情况则成为有环</p></blockquote><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt=""></p><blockquote><p>如果为下图的情况则没有环</p></blockquote><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" alt=""></p><blockquote><p>如果只有一个节点，也是没有环</p></blockquote><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" alt=""></p><p>本题有三种解决思路</p><blockquote><p>第一种：循环链表，如果最后找的 <code>next</code> 为 <code>null</code> 则表示没有环，这种方法不好控制，如果有环会死循环下去，所有可以加一个时间，比如两秒钟，但这样不靠谱（不推荐该方法）</p></blockquote><blockquote><p>第二种：同样时遍历链表，每次遍历一个值就将该节点存入到一个 <code>set</code> 集合中，每次先去集合中判断是否已有该地址，如果有则表示有环，否则五环，算法复杂度 O(n):</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>ListNode<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode first <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>first<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> first<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>第三种方法：使用两个步长不一样的指针，一个快指针（每次两布），还有一个慢指针（一次走一步）如果最终这两个指针能够指向同一个节点，则表示有环，否则无环，但是下面的代码只能用来判断是否有环，而不能返回环的起始节点，因为这种方法下，两个指针碰撞的地方不一定是在环的起始位置，所以这种方法只能返回Boolean类型</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 快指针</span>        ListNode fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 慢指针</span>        ListNode slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> slow<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 快指针一次走两步</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 慢指针一次走一步</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果两个指向了同一个节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span>slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>如果想要返回环的其实节点(比如上面第一张图中的2元素)，我们需要对上面的代码进行修改，在这种情况下，我们需要再加入一个步长为1的指针 <code>slow2</code> 当两个指针碰撞的时候，已经证明了这个链表是带有环的，那么剩下来的工作就是找到这个环的起点位置，如果此时加入一个步长为1的指针 <code>slow2</code>（slow的步长也是1），那么 <code>slow</code> 和 <code>slow2</code> 一定会相遇，而且碰撞的地方一定是环的起点。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 快指针</span>    ListNode fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 慢指针</span>    ListNode slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> slow<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 快指针一次走两步</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 慢指针一次走一步</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果两个指向了同一个节点，此处证明该链表一定有环，下面的代码时为了查找环的起点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span>slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode slow2 <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>slow2<span class="token operator">!=</span>slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>                slow2 <span class="token operator">=</span> slow2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> slow<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解 MySQL 的 JOIN 查询</title>
      <link href="/2019/01/15/LearningMySqlJoinQuery/"/>
      <url>/2019/01/15/LearningMySqlJoinQuery/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql-几种关联查询"><a href="#MySql-几种关联查询" class="headerlink" title="MySql 几种关联查询"></a>MySql 几种关联查询</h2><p>通过集合的交集\并集\差集等关系分析MySQL中的集中JOIN查询方式.</p><p>注意: MySQL 不支持 <code>FULL JOIN</code>(图6)<br>MySQL 中实现 <code>FULL JOIN</code>:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">&lt;</span>?<span class="token operator">></span><span class="token keyword">FROM</span> TableA <span class="token number">a</span><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> TableB <span class="token number">b</span><span class="token keyword">ON</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">key</span><span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span><span class="token keyword">key</span><span class="token keyword">UNION</span><span class="token keyword">select</span> <span class="token operator">&lt;</span>?<span class="token operator">></span><span class="token keyword">FROM</span> TableA <span class="token number">a</span><span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> TableB <span class="token number">b</span><span class="token keyword">ON</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">key</span><span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span><span class="token keyword">key</span></code></pre><p><a href="mysql_join.png"><img src="mysql_join.png" alt=""></a></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>dept_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'部门id'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">11</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>deptment<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>dept_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>code<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">6</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span>employee<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> dept_id<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">"W1"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"w1@a.com"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"W2"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"w2@a.com"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"W3"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"w3@a.com"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"W4"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"w4@a.com"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"W5"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"w5@a.com"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"W6"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"w6@a.com"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"W7"</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">"w7@a.com"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"W8"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">"w8@a.com"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"W9"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"w9@a.com"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"W10"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"w10@a.com"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> deptment<span class="token punctuation">(</span>dept_name<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">"DEPT01"</span><span class="token punctuation">,</span> <span class="token string">"001"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"DEPT02"</span><span class="token punctuation">,</span> <span class="token string">"002"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"DEPT03"</span><span class="token punctuation">,</span> <span class="token string">"003"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"DEPT04"</span><span class="token punctuation">,</span> <span class="token string">"004"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"DEPT05"</span><span class="token punctuation">,</span> <span class="token string">"005"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"DEPT06"</span><span class="token punctuation">,</span> <span class="token string">"006"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><blockquote><p>图1: LEFT JOIN</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employee <span class="token number">e</span><span class="token keyword">left</span> <span class="token keyword">join</span> deptment <span class="token number">d</span><span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>id</code></pre><p>图1 结果</p><p><a href="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545489397.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545489397.png" alt=""></a></p><hr><blockquote><p>图2: RIGHT JOIN</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employee <span class="token number">e</span><span class="token keyword">right</span> <span class="token keyword">join</span> deptment <span class="token number">d</span><span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><p>图2: 结果:</p><p><a href="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545490141.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545490141.png" alt=""></a></p><hr><blockquote><p>图3: INNER JOIN(A和B公共的数据)</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- inner join</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employee <span class="token number">e</span><span class="token keyword">inner</span> <span class="token keyword">join</span> deptment <span class="token number">d</span><span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><p>图3: 结果</p><p><a href="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545490268.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545490268.png" alt=""></a></p><hr><blockquote><p>图4 (A表独占的数据)</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employee <span class="token number">e</span><span class="token keyword">left</span> <span class="token keyword">join</span> deptment <span class="token number">d</span><span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>id <span class="token keyword">where</span> <span class="token number">d</span><span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span></code></pre><p>图4</p><p><a href="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545490887.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545490887.png" alt=""></a></p><hr><blockquote><p>图5 (B表独占的数据)</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employee <span class="token number">e</span><span class="token keyword">right</span> <span class="token keyword">join</span> deptment <span class="token number">d</span><span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>id<span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id <span class="token operator">is</span> <span class="token boolean">null</span></code></pre><p>图5 结果</p><p><a href="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545491281.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545491281.png" alt=""></a></p><hr><blockquote><p>图6</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employee <span class="token number">e</span><span class="token keyword">left</span> <span class="token keyword">join</span> deptment <span class="token number">d</span><span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>id<span class="token keyword">UNION</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employee <span class="token number">e</span><span class="token keyword">right</span> <span class="token keyword">join</span> deptment <span class="token number">d</span><span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><p>图6</p><p><a href="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545491475.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545491475.png" alt=""></a></p><hr><blockquote><p>图7</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employee <span class="token number">e</span><span class="token keyword">left</span> <span class="token keyword">join</span> deptment <span class="token number">d</span><span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>id<span class="token keyword">where</span> <span class="token number">d</span><span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span><span class="token keyword">UNION</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> employee <span class="token number">e</span><span class="token keyword">right</span> <span class="token keyword">join</span> deptment <span class="token number">d</span><span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>id<span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>dept_id <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p>图7 结果</p><p><a href="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545491847.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/AlanWangBit/Java-Advanced/master/doc/blog/imgs/1545491847.png" alt=""></a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 编程入门1</title>
      <link href="/2019/01/15/LearningGolang01/"/>
      <url>/2019/01/15/LearningGolang01/</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><blockquote><p>程序员第一课之: <code>Hello world</code></p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Prinln</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><blockquote><p>Go 语言是<code>编译型</code>语言, Go 的工具链将程序的源文件转化为所属机器的二进制指令, 即如果实在windows系统中编译源文件, 将会编译成可以直接在window系统上执行的二进制文件.</p></blockquote><blockquote><p>命令行中使用<code>run</code>命令, 可以直接将源文件进行编译, 链接, 然后执行生成的可以执行文件:</p></blockquote><pre class=" language-shell"><code class="language-shell">$ go run helloworld.go</code></pre><blockquote><p>使用<code>build</code>命令, 可以生成一个可执行文件, 可以直接运行:</p><pre class=" language-shell"><code class="language-shell">$ go build helloworld.go</code></pre><p>上述命令将会生成一个名为<code>helloworld</code>的二进制文件(windows下生成<code>helloworld.exe</code>文件), 可以直接运行该文件:</p><pre class=" language-shell"><code class="language-shell">$ ./helloworld</code></pre></blockquote><blockquote><p>Go 语言不需要再<code>语句</code>或者<code>声明</code>的后面使用分号, 除非由多个语句或声明在同一行, 因为语句和声明后面的换行符被转换成<code>分号</code>, 但是有些特定的符号后面的<code>换行符</code>不会转换为<code>分号</code>, 例如, <code>{</code> 符号后面的换行符不会被转换成<code>;</code>, 必须和<code>func</code>关键字放在同一行, 如果换行, 则 <code>{</code> 前面会添加一个<code>;</code>所以会编译报错.<br>再比如语句 <code>a+b</code>, 我们可以再<code>+</code>号的后面添加换行符, 但不能再<code>+</code>号的前面添加换行符, 因为<code>+</code>后面的换行符不会被转换成分号, 而<code>a</code>后面的换行符会被转换成分号.</p></blockquote><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>四种主要的声明: 变量(var), 常量(const), 类型(type)和函数(func), Go文件中以package开头, package后面是import声明, 然后是<code>包级别</code>的<code>类型</code>,<code>变量</code>,<code>常量</code>和<code>函数</code>声明, 不区分顺序</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// boiling输出水的沸点(这是一段注释)</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">const</span> boilingF <span class="token operator">=</span> <span class="token number">212.0</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> f <span class="token operator">=</span> boilingF<span class="token punctuation">;</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>f <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">/</span><span class="token number">9</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Boiling point = %gF or %gC\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 输出结果:</span>    <span class="token comment" spellcheck="true">// boiling point = 212F or 100C</span><span class="token punctuation">}</span></code></pre><blockquote><p>常量<code>boilingF</code>是一个包级别的声明(main包), f和c是属于main函数的局部变量, <code>包级别</code>的声明对<code>同一个包</code>中的所有源文件都可见. <code>局部声明</code>只对所在的函数可见, 并且可能对于函数中的一小块区域可见.</p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Go语言中通过关键字 <code>var</code> 来声明变量, 形式如下: var 变量名 类型 = “初始值”</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span></code></pre><p>上面代码声明了一个名为<code>str</code>的<code>string</code>类型的变量, 并且设置其初始值为 <code>&quot;string&quot;</code>, 在声明变量的时候可以不指定初始化, 使用默认初始值, 如果手动设置了初始值, 则可以省略变量的类型, 编译器会根据初始化来判断变量的类型, 如下:</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 编译器根据初始值, 判断出str的类型为string类型</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"string"</span></code></pre><blockquote><p>可以通过一次声明一个变量列表的形式声明多个变量, 代码如下:</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 声明了三个变量, 都是int类型, 默认初始值都是0</span><span class="token keyword">var</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token comment" spellcheck="true">// 声明了三个变量, 并且分别为他们设置了不同类型的初始值</span><span class="token keyword">var</span> b<span class="token punctuation">,</span> f<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token string">"four"</span></code></pre><blockquote><p><code>包级别</code>的变量在<code>main</code>函数执行之前被初始化, <code>局部变量</code>则是在函数执行期间被初始化</p></blockquote><p>变量可以通过调用<code>返回多个值</code>的函数来初始化:</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// os.Open(name)函数返回一个文件和一个错误</span><span class="token keyword">var</span> f<span class="token punctuation">,</span> err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></code></pre><h3 id="短变量声明-省略var关键字"><a href="#短变量声明-省略var关键字" class="headerlink" title="短变量声明(省略var关键字)"></a>短变量声明(省略var关键字)</h3><blockquote><p>短变量声明只能用来在<code>函数内部</code>声明<code>局部变量</code>, 通过 name:=expression 的形式来声明, 这种声明方法必须指定初始值, 类型通过初始值来判断, 例如:</p></blockquote><pre class=" language-go"><code class="language-go">t <span class="token operator">:=</span> <span class="token number">0.1</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> f <span class="token operator">:=</span> <span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">12.08</span><span class="token comment" spellcheck="true">// 短变量声明也可以调用返回多个值的函数来初始化</span>f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></code></pre><blockquote><p>短变量声明时, 如果左边的变量名已经声明过, 则对其赋值, 并且短变量<code>最少要声明</code>一个<code>新的变量</code>, 代码如下:</p></blockquote><pre class=" language-go"><code class="language-go">f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 此处的err在同一个代码块中已经声明过了</span><span class="token comment" spellcheck="true">// 所以此处对err变量进行赋值, 而不是声明err再赋值</span>in<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 下面的代码时错误的, 而不是像上一行中的赋值</span><span class="token comment" spellcheck="true">// 左侧的的变量名列表中</span><span class="token comment" spellcheck="true">// 必须有新的变量名(即前面没有声明过的)才会对已声明过的进行赋值, 否则报错</span>f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></code></pre><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><code>变量</code>是存储值的地方, 使用声明的变量名来区分, 而<code>指针</code>的值则是<code>一个变量的地址</code>, 如果声明一个变量为: <code>var x int</code>, 可以通过表达式<code>&amp;x</code>(x的地址)获取一个指向整型变量的指针, 它的类型是<code>整形指针(*int)</code>, 如果这个指针称为p, 则<code>*p</code>可以获取变量的值, 表示一个变量</p><pre class=" language-go"><code class="language-go">x <span class="token operator">:=</span> <span class="token number">1</span>p <span class="token operator">:=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// p是整形指针, 指向x</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出: 1</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// 等价于 x=2</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出: 2</span></code></pre><p>指针类型的零值是<code>nil</code>, 指针是可以比较的, 两个指针当且仅当<code>指向同一个变量</code>或者都为<code>nil</code>的时候才相等.</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> x<span class="token punctuation">,</span> y <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x <span class="token operator">==</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x <span class="token operator">==</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token operator">==</span><span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true false false</span></code></pre><blockquote><p>函数返回<code>一个局部变量的指针</code>是非常安全的, 如下代码:</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    v <span class="token operator">:=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">// &amp;v是一个指向局部变量v的指针</span>    <span class="token comment" spellcheck="true">// 在函数结束后局部变量依然存在, 指针p依然指向v</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>v<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 每一次调用函数f()都是不一样的结果</span><span class="token comment" spellcheck="true">// 因为每次调用都会创建一次局部变量, 每次的局部变量地址都不相同</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出false</span></code></pre><blockquote><p>可以将<code>指针</code>作为函数的参数传递</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">incr</span><span class="token punctuation">(</span>p <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token operator">*</span>p<span class="token operator">++</span>    <span class="token keyword">return</span> <span class="token operator">*</span>p<span class="token punctuation">}</span>v <span class="token operator">:=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// 将变量v的地址传递个函数, 函数修改了这个指针指向的变量的值</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 输出3</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 输出3</span><span class="token comment" spellcheck="true">// **********不使用指针传参*************</span><span class="token comment" spellcheck="true">// 函数的参数i是变量d的一个副本, 函数内部修改的是变量i的值</span><span class="token comment" spellcheck="true">// 不会修改到变量d的值, 因为i和d在内存中的不同地址上</span><span class="token keyword">func</span> <span class="token function">incrNp</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    i<span class="token operator">++</span>    <span class="token keyword">return</span> i<span class="token punctuation">}</span>d <span class="token operator">:=</span> <span class="token number">1</span><span class="token function">incrNp</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">incrNp</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 输出2</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 输出1</span></code></pre><p><code>flag</code>包中的很多方法的返回值都是指针</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"flag"</span>    <span class="token string">"fmt"</span>    <span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 因为n和sep都是指针类型的, 所以在使用的时候需要加上 `*` 号</span><span class="token keyword">var</span> n <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"omit_trailing newline"</span><span class="token punctuation">)</span><span class="token keyword">var</span> sep <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"separator"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span><span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>sep<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token operator">*</span>n <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="new-函数"><a href="#new-函数" class="headerlink" title="new 函数"></a>new 函数</h3><p>我们还可以使用GO语言中内置函数<code>new</code>可以创建变量, 表达式<code>new(T)</code>创建一个未命名的<code>T</code>类型的变量, 并初始化为T类型的零值, 并且返回其地址(地址类型为*T)</p><pre class=" language-go"><code class="language-go">p <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// p的类型为`*int`, 即p中存的是一块内存的地址, 指向未命名的int变量</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出0</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">2</span>             <span class="token comment" spellcheck="true">// 修改未命名的变量的值为2</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 输出2</span></code></pre><blockquote><p><code>new</code> 是一个预声明的函数, 不是一个关键字</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 此处的new只是一个变量名, 但是在该方法内部是不能使用内置函数new</span><span class="token keyword">func</span> <span class="token function">delta</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> <span class="token builtin">new</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//var a = new(int)</span>    <span class="token comment" spellcheck="true">//fmt.Println(a)</span>    <span class="token keyword">return</span> <span class="token builtin">new</span> <span class="token operator">-</span> old<span class="token punctuation">}</span></code></pre><h3 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h3><p><code>包级别</code> 变量的生命周期是整个程序的执行时间, <code>局部变量</code> 则是有一个动态的生命周期: 每次执行声明语句时创建一个新的实体, 变量一直存在, 直到变得<code>不可访问</code>, 然后回收其占用的空间. 函数的参数和返回值也是局部变量, 在其闭包的函数被调用的时候创建, 例如:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> t <span class="token operator">:=</span> <span class="token number">0.0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> cycles<span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span>math<span class="token punctuation">.</span>PI<span class="token punctuation">;</span> t <span class="token operator">+=</span> res <span class="token punctuation">{</span>    x <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    y <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>t<span class="token operator">*</span>freq<span class="token operator">+</span>phase<span class="token punctuation">)</span>    img<span class="token punctuation">.</span><span class="token function">SetColorIndex</span><span class="token punctuation">(</span>size<span class="token operator">+</span><span class="token function">int</span><span class="token punctuation">(</span>x<span class="token operator">*</span>size<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token operator">+</span><span class="token function">int</span><span class="token punctuation">(</span>y<span class="token operator">*</span>size<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> blackIndex<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上述代码中, 变量<code>t</code>在每次for循环的开始时候创建, 而变量<code>x</code>和<code>y</code>则是在每次迭代中创建. 编译器可以选择在<code>堆内存</code>或者<code>栈内存</code>上分配空间, 但是并不是基于是否使用<code>var</code>或者<code>new</code>关键字来声明变量.</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> global <span class="token operator">*</span><span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token builtin">int</span>    x <span class="token operator">=</span> <span class="token number">1</span>    global <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    y <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token operator">*</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><p>上面的代码中, 变量<code>x</code>一定是在<code>堆内存</code>空间上, 因为有一个包级别的指针指向这块内存, 所以在函数<code>f()</code>返回以后, 仍然可以通过这个指针来使用这个空间, 变量<code>x</code>是函数内部的局部变量, 这种情况可以成为变量<code>x</code>从函数<code>f</code>中<code>逃逸</code><br>相反情况, 函数<code>g()</code>在返回以后, 变量<code>*y</code>变成了不可访问, 因此会被回收, 因为<code>*y</code>没有从函数中<code>逃逸</code>, 所以编译器会在<code>栈空间</code>上分配<code>*y</code>, 即使是使用<code>new函数</code>创建</p><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><h3 id="多重赋值"><a href="#多重赋值" class="headerlink" title="多重赋值"></a>多重赋值</h3><p><code>多重赋值</code> 允许几个变量一次性被赋值, 在实际更新数据之前, 右边的表达式被推演, 当变量<code>同时出现</code>在<code>=</code>的两边时, 这种用法特别有用, 例如:</p><p>交换两个变量</p><pre class=" language-go"><code class="language-go">x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x</code></pre><p>计算两个整数的最大公约数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> y <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token operator">%</span>y    <span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token punctuation">}</span></code></pre><p>或者计算斐波那契数列的第n个数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    x<span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token operator">+</span>y    <span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token punctuation">}</span></code></pre><p>如果表达式比较复杂, 则避免使用多重赋值形式, 独立的语句更易读.</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过源码分析Java原子操作类(CAS)</title>
      <link href="/2019/01/15/LearnCAS-BySourceCode/"/>
      <url>/2019/01/15/LearnCAS-BySourceCode/</url>
      
        <content type="html"><![CDATA[<h2 id="JDK-并发包-JUC"><a href="#JDK-并发包-JUC" class="headerlink" title="JDK 并发包(JUC)"></a>JDK 并发包(JUC)</h2><p>Java 的 <code>java.util.concurrent.atomic</code> 包种提供了17个原子操作的类(JDK1.8), 其中提供了3个以原子方式更新基本类型的类, 分别是: <code>AtomicInteget</code> <code>AtomicLong</code> <code>AtomicBoolean</code> 其中的方法基本相同, 本文以 <code>AtomicInteger</code> 为例</p><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Alan Wang * @date 2018/12/10. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> AtomicInteger ai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 相当于 `i++`         * getAndIncrement 先获取当前的值, 再进行+1操作         * 返回的是自增之前的数值         * output: 1         */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 相当于 `++i`         * incrementAndGet 先进行+1操作, 再获取自增后的值         * output: 3         */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * output: 3         */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ai<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>进入到 getAndIncrement (包:java.util.concurrent.atomic.AtomicInteger)方法源码中:</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Unsafe类是单例的, 所以不能通过new关键字创建对象</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Unsafe unsafe <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// valueOffset是对象中变量(value)的内存偏移量</span><span class="token comment" spellcheck="true">// 假如对象的内存地址是从第100开始的</span><span class="token comment" spellcheck="true">// 如果偏移量为10,则对象中变量value的内存地址是从110开始的</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取当前属性value的偏移量</span>        valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span>            <span class="token punctuation">(</span>AtomicInteger<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用Unsafe类的本地方法</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>unsafe.getAndAddInt 方法的源码如下:</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// var1: 当前的AtomicInteger实例(内存地址)</span><span class="token comment" spellcheck="true">// var2: 对象的变量value的内存偏移量</span><span class="token comment" spellcheck="true">// var4: 要曾加上的数值(该方法时自增, 所以每次都是+1, 所以var4=1)</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 内存中的值</span>    <span class="token keyword">int</span> var5<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据当前AtomicInteger对象和value的内存偏移量获取当前内存中的值</span>        var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// CAS操作, 是个参数, 分别是:</span>        <span class="token comment" spellcheck="true">// var1 当前的AtomicInteger实例(内存地址)</span>        <span class="token comment" spellcheck="true">// var2 对象的变量value的内存偏移量</span>        <span class="token comment" spellcheck="true">// var5 变量的预期值</span>        <span class="token comment" spellcheck="true">// var5+var4 新的值</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> var5 <span class="token operator">+</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// compareAndSwapInt 方法的解释:</span>    <span class="token comment" spellcheck="true">// 如果对象var1中内存偏移量为var2变量的值等于预期值var5</span>    <span class="token comment" spellcheck="true">// 则使用新值(var5+var4)替换旧的值var5</span>    <span class="token comment" spellcheck="true">// 如果不等于预期值, 则循环继续获取内存中新的预期值继续判断</span>    <span class="token comment" spellcheck="true">// (方法内部会更具var1和var2再次获取内存中的值)</span>    <span class="token keyword">return</span> var5<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>Unsafe类中的 compareAndSwapInt 方法源码:</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>    Object var1<span class="token punctuation">,</span>     <span class="token keyword">long</span> var2<span class="token punctuation">,</span>     <span class="token keyword">int</span> var4<span class="token punctuation">,</span>     <span class="token keyword">int</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从上面的源码中我们可以看出这是一个Java的本地方法, 其中有四个参数(个人觉得理解该方法比较重要, 所以此处再重复一次):</p><p>// Object var1: 当前的AtomicInteger对象, 通过var1可以获取对象在内存中的地址<br>// long var2: 对象var1中的变量value的内存偏移量(偏移量上面第二个代码片段中有解释)</p><p>compareAndSwapInt方法内部通过 var1 和 var2 可以获取对象的value变量在内存中的值</p><p>// int var4 是预期值(即在调用该方法之前先查询一次内存中的值)<br>// int var5 是需要修改的新值</p><blockquote><p>总结CAS操作的思想, 首先查询内存中的值作为预期值传递个CAS方法, 然后CAS方法中再一次查询内存中的值, 如果本次查询的值等于上一次查询的预期值, 表示中间没有其他线程修改过该值, 则可以使用新值替换旧值, 如果不相等, 则表示中间被其他线程修改过, 所以所以在循环中继续查一次内存中的值, 作为新的预期值, 在此调用CAS操作, 直到最后设置成功.</p></blockquote><h2 id="Unsafe类中的其他方法介绍"><a href="#Unsafe类中的其他方法介绍" class="headerlink" title="Unsafe类中的其他方法介绍:"></a>Unsafe类中的其他方法介绍:</h2><blockquote><p>返回指定的变量在所属对象中的内存偏移量</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">objectFieldOffset</span><span class="token punctuation">(</span>Field var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用法: 如下获取变量value在对象中的偏移量</span>valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span>AtomicInteger<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>获取数组中第一个元素的位置</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">arrayBaseOffset</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>获取对象var1中偏移量为var2的变量对应volatile语义的值</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">getLongVolatile</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>获取数组中 一个元素 占用的字符</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">arrayIndexScale</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> CAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程实战-第五章：基础构建模块</title>
      <link href="/2019/01/10/JavaConcurrencyInPractice-Chapter05/"/>
      <url>/2019/01/10/JavaConcurrencyInPractice-Chapter05/</url>
      
        <content type="html"><![CDATA[<h1 id="同步容器类"><a href="#同步容器类" class="headerlink" title="同步容器类"></a>同步容器类</h1><p>Java 中的<code>同步容器类</code> 包括 <code>Vector</code> 和 <code>Hashtable</code> 以及 <code>Collections.synchronizedXxx</code> 等工厂方法创建的容器，这些同步容器类的实现线程安全的方式是：将类中的每一个共有方法都添加锁，进行同步，每次只能有一个线程访问容器的状态。</p><h4 id="同步容器类的问题"><a href="#同步容器类的问题" class="headerlink" title="同步容器类的问题"></a>同步容器类的问题</h4><blockquote><p>同步容器是线程安全的，但是在某些 <code>复合操作</code> 的情况下会出现一些奇怪的错误，容器的常见 <code>复合操作</code> 包括：<code>迭代</code> <code>跳转(找到当前元素的下一个)</code> <code>条件运算(若不包含则添加)</code><br>现在假如我们有一个 <code>Vector</code> 类型的容器，存放了100个元素，我们有两个线程分别调用两个方法，假如 <code>线程A</code> 调用 <code>getLast</code> 方法，<code>线程B</code> 调用 <code>deleteLast</code> 方法，代码如下：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Vector 是同步容器类，虽然是线程安全的，但在某些情况下需要额外的枷锁来保护复合操作 * 例如：线程A调用getList，并且获取到 lastIndex = 10 然后释放了锁; *      线程B获取到锁，调用 deleteLast 同样也获取到 lastIndex = 10; 如果线程B继续获取到锁调用了remove，即将最后一个元素删除 *      然后线程A又重新获取到锁调用 get(10) 则找不到元素，处罚异常 * * @author Alan Wang * @date 2018/11/5 22:25 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VectorTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Vector<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"初始化完成。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VectorDemo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VectorDemo</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动第一个线程</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动第二个线程</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">VectorDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Vector<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">VectorDemo</span><span class="token punctuation">(</span>Vector<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">getLast</span><span class="token punctuation">(</span>Vector list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// size 方法枷锁了</span>        <span class="token keyword">int</span> lastIndex <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastIndex<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程(获取)【"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"】lastIndex = "</span><span class="token operator">+</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteLast</span><span class="token punctuation">(</span>Vector list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> lastIndex <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程(删除)【"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"】lastIndex = "</span><span class="token operator">+</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"已删除第："</span><span class="token operator">+</span>lastIndex<span class="token operator">+</span><span class="token string">" 号元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String name <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第一个线程调用 getLast</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"Thread-0"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">// 第二个线程调用 deleteLast</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"Thread-1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteLast</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>执行的结果</p></blockquote><p><img src="result.png" alt="result"></p><blockquote><p>然后我们来分析一下这个结果，首先线程0 拿到锁，获取到了 lastIndex = 9，然后释放锁，接着线程1 获取到锁，同样获取到 lastIndex = 9，然后锁又被 线程0 拿到了，此使 lastIndex 还是9，然后线程1 又拿到了锁开始删除操作，将下标为 9 的元素删除，释放锁后 线程0 通过上一次拿到的 lastIndex = 9 去获取元素，发现该元素已经不存在了，所以出现数组越界的异常。<br>通过该例子，可以很好的理解为什么 <code>同步容器</code> 在进行一些复合操作的时候会出现错误的结果。</p></blockquote><p>解决该问题的方法是：给客户端枷锁，将 getLast 方法和 deleteLast 方法改为如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">getLast</span><span class="token punctuation">(</span>Vector list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// size 方法枷锁了</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> lastIndex <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastIndex<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程(获取)【"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"】lastIndex = "</span><span class="token operator">+</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteLast</span><span class="token punctuation">(</span>Vector list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> lastIndex <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程(删除)【"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"】lastIndex = "</span><span class="token operator">+</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"已删除第："</span><span class="token operator">+</span>lastIndex<span class="token operator">+</span><span class="token string">" 号元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这种情况下，getLast 中获取 lastIndex 和 get(lastIndex) 是一个原子操作，当获取到lastIndex后就立即将最后一个元素返回。 同样在 deleteLast 方法中获取 lastIndex 和 delete(lastIndex) 也是一个原则操作，当获取lastIndex后就立即将最后一个元素删除。</p><blockquote><p>可能会出现的一种结果：</p></blockquote><p><img src="result1.png" alt="result"></p><h1 id="并发容器"><a href="#并发容器" class="headerlink" title="并发容器"></a>并发容器</h1><p><code>同步容器</code> 将所有对容器状态的访问都串行化，以此来实现线程安全，严重降低容器的并发性能，当多个线程竞争容器锁时，吞吐量严重降低。<br><code>并发容器</code> 是针对多线程访问设计的，改进了同步容器的性能问题，极大地提高伸缩性并降低风险。</p><p><code>ConcurrentHashMap</code> 用来代替基于散列的同步Map容器，<code>CopyOnWriteArrayList</code> 用来替代以遍历操作为主的同步List</p><p>Java5 新增两种容器类型 <code>Queue</code> 和 <code>BlockingQueue</code><br><code>Queue</code> 用来临时保存一组等待处理的元素，提供了几种实现：</p><blockquote><p><code>ConcurrentLinkedQueue</code> 传统的先进先出队列<br><code>PriorityQueue</code> (非并发的) 优先队列</p></blockquote><p><code>Queue</code> 上的操作不会阻塞，若队列为空，获取元素的操作将返回控制</p><p><code>BlockingQueue</code> 扩展了 <code>Queue</code>, 增加了可阻塞的插入和获取操作，如果队列为空，那么获取元素的操作将一直阻塞，知道队列中出现一个空用的元素。如果队列已满，那么插入操作将会一直阻塞，在 <code>生产者-消费者</code> 模式中，阻塞队列非常有用。</p><h4 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h4><p><code>HashMap</code> 非同步容器，<code>key</code> 和 <code>value</code> 都允许 <code>null</code> 值。<br><code>HashTable</code> 同步容器，<code>key</code> 和 <code>value</code> 不允许 <code>null</code> 值。</p><p>ConcurrentHashMap 也是基于 HashCode 实现的 Map 容器，使用一种粒度更细的机制来提供了更高的并发性和伸缩性，这种机制成为分段锁，在这个机制下，任意数量的读取线程可以并发的访问map，执行读取的线程和执行写入操作的线程也可以同时并发的访问。</p><!-- # 阻塞队列和生产者-消费者模式---# 阻塞方法与中断方法---# 同步工具类---# 构建高效且可伸缩的结果缓存--- -->]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程实战-第二章：线程的安全性</title>
      <link href="/2019/01/08/JavaConcurrencyInPractice2/"/>
      <url>/2019/01/08/JavaConcurrencyInPractice2/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是线程安全"><a href="#什么是线程安全" class="headerlink" title="什么是线程安全"></a>什么是线程安全</h1><p><code>定义：</code> 当多个线程访问某个类时，这个类始终都能表现出正确的行为，则称该类是<code>线程安全的</code>。</p><p><code>无状态对象一定是线程安全的</code></p><p><code>无状态：</code> 既不包含任何全局域，也不包含任何对其他类中域的引用。</p><p><strong>一个无状态的类</strong> 一个基于 <code>Servlet</code> 的因式分解服务</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatelessFactorizer</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigInteger i <span class="token operator">=</span> <span class="token function">extractFromRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> factors <span class="token operator">=</span> <span class="token function">factor</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">encodeIntoResponse</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> factors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h1><p>在上节中的因式分解服务中，添加一个计数器，用来统计处理的请求数量，代码如下：</p><p><strong>这是一个线程不安全的类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeCountingFactorizer</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计数器</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigInteger i <span class="token operator">=</span> <span class="token function">extractFromRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> factors <span class="token operator">=</span> <span class="token function">factor</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>count<span class="token punctuation">;</span>        <span class="token function">encodeIntoResponse</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> factors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的代码中是线程不安全的，首先 <code>++count</code> 是一个 <code>非原子性</code> 的操作，而是包含了三个独立的操作：<code>读取count</code> <code>修改count</code> <code>写入count</code><br>如果线程A和线程B同时都读取到count的值为0，两个线程在各自的私有内存中将只修改为1，然后又分别将1写入到主内存，那么显然丢失了一次统计</p><p>这种因为多线程的执行顺序引起的不正确的情况成为 <code>竞态条件</code></p><h2 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h2><p>常见的竞态条件就是: <code>先检查后执行</code> 的操作, 即通过一个可能已经失效的结果来决定下一步的动作。</p><h2 id="示例：延迟初始化中的竞态条件"><a href="#示例：延迟初始化中的竞态条件" class="headerlink" title="示例：延迟初始化中的竞态条件"></a>示例：延迟初始化中的竞态条件</h2><p><strong>这是一个非线程安全的类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyInitRace</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ExpensiveObject instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    ExpensiveObject <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpensiveObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述代码是无法保证 <code>正确性</code> 的，假设线程A执行if判断是得到instance==null为true，但在线程A执行new语句之前，线程B也执行if判断得到了instance==null为true，<br>那么线程A和线程B将都会执行new语句，则将会创建出两个对象。</p><h2 id="复合操作"><a href="#复合操作" class="headerlink" title="复合操作"></a>复合操作</h2><blockquote><p>复合操作：包含了一组必须以原子方式执行的操作以确保线程的安全性，此处我们先使用现有的线程安全类来解决线程安全问题</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountingFactorizer</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicLong count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Service</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigInteger i <span class="token operator">=</span> <span class="token function">extractFromRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> factors <span class="token operator">=</span> <span class="token function">factor</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">encodeIntoResponse</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> factors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述代码使用 <code>AtomicLong</code> 来代替 <code>long</code> 类型，<code>AtomicLong</code> 是 <code>java.util.concurrent.atomic</code> 包中的原子变量类，用于实现数值和对象引用上的原子状态转换。<br>使用 <code>AtomicLong</code> 来修改count，能够确保所有线程对count的状态访问都是原子的，因为上述类中只有一个count状态，所以上述的类是线程安全的。</p><h1 id="加锁机制"><a href="#加锁机制" class="headerlink" title="加锁机制"></a>加锁机制</h1><p>上一节的 <code>CountingFactorizer</code> 类中只有一个状态，所以使用 <code>AtomicLong</code> 修改状态就可以保证整个类的线程安全，但是，如果类中增加一种或几种状态，是否可以通过线程安全类来修改所有的状态就能保证类的线程安全呢？？？</p><p>假如，在我们因式分解的例子中，需要添加一种缓存机制，如果连续的两个请求时对同一个数进行因式分解，则直接使用上一次计算的结果，所以需要保存上一次因式分解的数值，和计算结果</p><p><strong>线程不安全的代码演示</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeCachingFactorizer</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 上一次因式分解的数值</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicReference<span class="token operator">&lt;</span>BigInteger<span class="token operator">></span> lastNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 上一次因式分解的结果</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicReference<span class="token operator">&lt;</span>BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> lastFactors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Service</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取要进行因式分解的数值</span>        BigInteger i <span class="token operator">=</span> <span class="token function">extractFromRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上一次已经计算过，直接使用上一次的结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lastNumber<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">encodeIntoResponse</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> lastFactors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 计算因式分解</span>            BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> factors <span class="token operator">=</span> <span class="token function">factor</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 记录本次的计算结果，以备后续使用</span>            lastNumber<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            lastFactors<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>factors<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">encodeIntoResponse</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> factors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的代码中使用了原子引用类来修改类中的两个状态，但是UnsafeCachingFactorizer类中存在竞态条件，无法保证线程的安全性；<br>假设我们有线程A和线程B，如果两个线程要因式分解同一个数值，那么我们来分析一些上面代码中的缓存有没有生效。</p><blockquote><p>首先 <code>set()</code> 操作时原子性的，但是无法保证lastNumber和lastFactors同时更新，假如线程A成功的set了lastNumber的值，但在线程A设置lastFactors的值之前，线程B执行了get操作，那么显然线程B将得到一个错误的数值。</p></blockquote><p>显然，线程安全的不变性条件被破坏，此处的不变性条件应该是：lastFactors中缓存的数据应该是lastNumber的因式分解的结果，所以在修改了lastNumber而没有修改lastFactors的值，而其他线程有机会执行，则破坏了不变性条件，所以无法确保线程的安全。</p><h2 id="内置锁"><a href="#内置锁" class="headerlink" title="内置锁"></a>内置锁</h2><p>Java 通过内置锁机制支持原子性：同步代码块机制<br>同步代码块包括两部分：<code>一个作为锁的对象引用</code>，<code>一个作为有该锁保护的代码块</code>？？？？？？？？？？？？？？（需要后续继续解读）</p><blockquote><p>普通同步方法，锁是当前实例对象 ？？？？？？？？？？？？？？（需要后续继续解读）<br>静态同步方法，锁是当前类的Class对象 ？？？？？？？？？？？？？？（需要后续继续解读）<br>同步代码块，锁是括号中配置的对象 ？？？？？？？？？？？？？？（需要后续继续解读）</p></blockquote><p>由于一次只能有一个线程进入同步代码块，所以内置锁保护的代码块是原子方式执行的。</p><p><strong>使用synchronized保证安全，但该例子性能很差</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedFactorizer</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 上一次因式分解的数值</span>    <span class="token keyword">private</span> BigInteger lastNumber<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 上一次因式分解的结果</span>    <span class="token keyword">private</span> BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> lastFactors<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">Service</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取要进行因式分解的数值</span>        BigInteger i <span class="token operator">=</span> <span class="token function">extractFromRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上一次已经计算过，直接使用上一次的结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lastNumber<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">encodeIntoResponse</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> lastFactors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 计算因式分解</span>            BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> factors <span class="token operator">=</span> <span class="token function">factor</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 记录本次的计算结果，以备后续使用</span>            lastNumber<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            lastFactors<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>factors<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">encodeIntoResponse</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> factors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="重入"><a href="#重入" class="headerlink" title="重入"></a>重入</h2><p>每一个锁都会关联一个<code>获取锁计数器</code> 和一个 <code>获取锁的线程</code>，计数器为0表示没有线程获取到锁，当一个线程获取到一个计数器为0的锁时，JVM记录锁的持有者，并且设置计数器值为1，此时其他线程将等待锁的释放，如果同一个线程再次获取锁(<code>重入</code>)，计数器+1，而当线程退出代码块，计数器将会相应递减，当计数器减为0，则释放锁。</p><p>锁的重入：<code>降低多次获取和释放锁的性能损耗</code> <code>避免了某种死锁的发生</code>(如下)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingWidget</span> <span class="token keyword">extends</span> <span class="token class-name">Widget</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": calling doSomething"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>上述代码中，两次调用 <code>doSomething()</code> 方法都需要获取 <code>Widget</code> 上的锁(<code>或者在同一个类中的一个加锁方法中调用另一个加锁的方法也会发生锁的重入</code>)，如果锁不能重入，则无法调用 <code>super.doSomethis()</code> 因为锁已经被同一个线程获取，所以线程将永远无法获取到锁，避免了这种死锁情况的发生</p></blockquote><h1 id="用锁来保护状态"><a href="#用锁来保护状态" class="headerlink" title="用锁来保护状态"></a>用锁来保护状态</h1><p>对象的内置锁与其状态之间没有内在的关联</p><p>对象的域不一定要通过内置锁来保护</p><blockquote><p>当线程获取到某个对象的锁时，并不能阻止其他线程访问对象，只能阻止其他线程获取锁。</p></blockquote><p>如果在类的每个方法上都加锁，也无法确保复合操作都是 <code>原子性</code> 的，例如 <code>Vector</code> 类;<br>例如下面代码中的 <code>contains()</code> 方法和 <code>add()</code> 方法都是加锁的，当时if代码块中的复合操作并不是原子性的，<br>因为线程A在获取到锁调用用 contains 方法后可能会释放锁，此时如果其他线程获取了锁则结果将不可预知。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VectorTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vector<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="活跃性与性能"><a href="#活跃性与性能" class="headerlink" title="活跃性与性能"></a>活跃性与性能</h1><p>缩小同步代码块的范围，可以既能确保较高的 <code>并发性</code> 又能维护 <code>线程安全性</code>，要确保同步代码块不要太小，而且不要将本应该时原子的操作拆分到多个代码块中，<br>应该尽量将 <code>不影响共享状态</code> 且 <code>执行时间较长</code> 的操作从同步代码块中分离出来。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachedFactorizer</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 上一次计算的数据     */</span>    <span class="token annotation punctuation">@GuardedBy</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> BigInteger lastNumber<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 上一次求出的结果     */</span>    <span class="token annotation punctuation">@GuardedBy</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> lastFactors<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 请求次数     */</span>    <span class="token annotation punctuation">@GuardedBy</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">long</span> hits<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GuardedBy</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">long</span> cacheHits<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigInteger i <span class="token operator">=</span> <span class="token function">extractFormRequest</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> factors <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 统计请求次数</span>            <span class="token operator">++</span>hits<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果要计算的数据已经计算过了</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> i<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lastNumber<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token operator">++</span>cacheHits<span class="token punctuation">;</span>                factors <span class="token operator">=</span> lastFactors<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>factors <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            factors <span class="token operator">=</span> <span class="token function">factor</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lastNumber <span class="token operator">=</span> i<span class="token punctuation">;</span>                lastFactors <span class="token operator">=</span> factors<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">encodeIntoResponse</span><span class="token punctuation">(</span>servletResponse<span class="token punctuation">,</span> factors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>当执行时间教程的计算或者无法快速完成的操作时（如网络IO），一定不要持有锁。</p></blockquote><blockquote><p>通常，当实现某个同步策略时，一定不要盲目的为了性能而牺牲简单性（这可能会破坏安全性）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis 批量更新案例</title>
      <link href="/2019/01/05/BatchUpdateByMyBatis01/"/>
      <url>/2019/01/05/BatchUpdateByMyBatis01/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis-批量更新案例"><a href="#MyBatis-批量更新案例" class="headerlink" title="MyBatis 批量更新案例"></a>MyBatis 批量更新案例</h2><blockquote><p>ModelMapper.java</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// mapper接口方法</span><span class="token keyword">void</span> <span class="token function">updateBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> List<span class="token operator">&lt;</span>Model<span class="token operator">></span> modelList<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>ModelMapper.xml</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBatch<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.test.Model<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    update model_table    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model_name<span class="token punctuation">=</span> case id<span class="token punctuation">"</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>else model_name end,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.modelName!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    when id=#{item.id} then #{item.modelName}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>    where    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        ID = #{i.id,jdbcType=BIGINT}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode判断一个括号字符串是否是合法的</title>
      <link href="/2019/01/04/LeetCode-ValidParentheses/"/>
      <url>/2019/01/04/LeetCode-ValidParentheses/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><strong>描述：Valid Parentheses</strong> <a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="noopener">题目地址</a><br></p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><blockquote><p><strong>输入:</strong> “{()}[]” -&gt; true<br><strong>输入:</strong> “({)}[]” -&gt; false<br><strong>输入:</strong> “[]” -&gt; true<br><strong>输入:</strong> “” -&gt; true</p></blockquote><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><blockquote><p>使用栈结构来处理 <br><br>栈介绍:** 先进后出(FILO), 例如子弹夹, 将元素放入栈中叫<code>压栈</code> 将元素从栈中弹出叫<code>出栈</code> <br></p></blockquote><p>以字符串 <code>{()}</code> 为例: </p><blockquote><p>1, 第一个元素 <code>{</code> 入栈<br>2, 第二个元素 <code>(</code> 判断和<code>栈顶</code>的元素不匹配, 也将其压入栈中<br>3, 第三个元素 <code>)</code> 和<code>栈顶</code>元素匹配, 所以将<code>栈顶</code>元素弹出, 然后栈中只剩下 <code>{</code><br>4, 第四个元素 <code>}</code> 和现在的<code>栈顶</code>元素匹配, 所以也将<code>栈顶</code>元素弹出, 现在为<code>空栈</code><br>5, 返回结果: <code>括号字符串是合法的</code></p></blockquote><p><img src="example.png" alt="example"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>alan<span class="token punctuation">.</span>leetcode<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 判断一个字符串括号是否是合法的 * @author Alan Wang * @date 2018/11/18 14:43 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidParentheses</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Solution solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> solution<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token string">"[({)]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Character<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'}'</span><span class="token punctuation">,</span> <span class="token string">'{'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 字符串转换为字符数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Character<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> aChar <span class="token operator">:</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 查看栈顶的是否匹配</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aChar<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aChar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> chars<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="https://github.com/AlanWangBit/Java-Advanced/blob/master/java-algorithm/src/main/java/com/alan/leetcode/ValidParentheses.java" target="_blank" rel="noopener">源码地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode交换链表中相邻的两个元素</title>
      <link href="/2019/01/03/LeetCodeSwapNodesInPairs/"/>
      <url>/2019/01/03/LeetCodeSwapNodesInPairs/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><strong>描述：Swap Nodes in Pairs</strong> <a href="https://leetcode.com/problems/swap-nodes-in-pairs" target="_blank" rel="noopener">题目地址</a><br></p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><blockquote><p><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null<br><strong>输出:</strong> 2-&gt;1-&gt;4-&gt;3-&gt;5-&gt;null</p></blockquote><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><blockquote><p><code>curr</code> 为当前正在遍历的元素, 我们称它为 <code>a元素</code><br><code>next</code> 当前元素的后面一个元素, 我们称他为 <code>b元素</code><br><code>c</code> 元素为当前元素后面的第二个元素<br><code>prev</code> 元素为当前遍历到的元素的前一个元素, 如果当前遍历的为第一个元素，则 <code>prev=null;</code>（前面一部分链表的最后一个节点）</p></blockquote><blockquote><p>(1), curr.next = next.next; // <code>a元素</code> 的 <code>next</code> 指向 <code>c元素</code><br>(2), next.next = curr; // <code>b元素</code> 的 <code>next</code> 指向 <code>a元素</code><br>(3), prev.next = next; // <code>prev</code> 元素指向 <code>b元素</code>(将链表前面一半的元素和后面的元素链接上)<br>(4), prev = curr; //交换之后，a元素是前面元素的最后一个元素，所以更新 <code>prev</code> 指向 <code>a元素</code><br>(5), curr = curr.next; // 下一次遍历的元素为 <code>a元素</code> 的下一个元素</p></blockquote><p><img src="listnode.png" alt="listnode"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>alan<span class="token punctuation">.</span>leetcode<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alan<span class="token punctuation">.</span>leetcode<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ListNodeUtil<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author Alan Wang * @Date 2018/11/12. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwapNodesInPairs</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode head <span class="token operator">=</span> ListNodeUtil<span class="token punctuation">.</span><span class="token function">generateListNode</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode curr <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>val<span class="token operator">+</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------开始交换----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SwapNodesInPairsSolution solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SwapNodesInPairsSolution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode listNode <span class="token operator">=</span> solution<span class="token punctuation">.</span><span class="token function">swapPairs</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode node <span class="token operator">=</span> listNode<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token operator">+</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 交换链表中相邻的两个元素 */</span><span class="token keyword">class</span> <span class="token class-name">SwapNodesInPairsSolution</span> <span class="token punctuation">{</span>    ListNode <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前正在遍历的元素</span>        ListNode curr <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前正在遍历的元素的后一个</span>        ListNode next<span class="token punctuation">,</span> prev <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 假设链表为：prev->a->b->c->null         */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> curr<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取当前元素的下一个元素</span>            next <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将a的next指向b的next</span>            curr<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将b的next指向a</span>            next<span class="token punctuation">.</span>next <span class="token operator">=</span> curr<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将a前面一个元素的next指向b</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>prev<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                head <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// prev 指向元素a</span>            prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 元素a往后移动一位</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode反转链表</title>
      <link href="/2019/01/02/leetCode-reverseLinkedlist/"/>
      <url>/2019/01/02/leetCode-reverseLinkedlist/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><strong>反转一个单向链表</strong> <a href="https://leetcode.com/problems/reverse-linked-list" target="_blank" rel="noopener">题目地址</a><br></p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><blockquote><p><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;null <br><br><strong>输出:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;null <br></p></blockquote><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><blockquote><p><code>currNode</code> 当前正在遍历的节点(原链表头节点)<br><code>prevNode</code> 新链表节点头节点(最初新链表为空所以初始值为null)</p></blockquote><blockquote><p><strong>因为每次遍历时, 都会修改当前遍历节点的 <code>next</code> 所以每次修改前应该先记录当前的 <code>next</code> 即原链表修改后的头节点</strong></p></blockquote><pre class=" language-java"><code class="language-java">ListNode nextTemp <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span></code></pre><blockquote><p><strong>每一次遍历时, 只需要将 <code>currNode</code> 节点的 <code>next</code> 指向 <code>prevNode</code> 节点, 即：</strong></p></blockquote><pre class=" language-java"><code class="language-java">currNode<span class="token punctuation">.</span>next <span class="token operator">=</span> prevNode<span class="token punctuation">;</span></code></pre><blockquote><p><strong>此时新链表前面多了一个节点, 所以需要将 <code>prevNode</code> 即：</strong></p></blockquote><pre class=" language-java"><code class="language-java">prevNode <span class="token operator">=</span> currNode<span class="token punctuation">;</span></code></pre><p><img src="listNode.png" alt=""></p><p><img src="listNode1.png" alt=""></p><p><img src="listNode2.png" alt=""></p><p><img src="listNode3.png" alt=""></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>alan<span class="token punctuation">.</span>leetcode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 反转链表：例如 输入 1->2->3->4->5->null 输出：5->4->3->2->1->null * leetCode: https://leetcode.com/problems/reverse-linked-list * @author Alan Wang * @date 2018/11/11 21:31 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReverseLinkedList</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode listNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode head <span class="token operator">=</span> listNode<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            listNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            listNode <span class="token operator">=</span> listNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode curr <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>val<span class="token operator">+</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------开始反转------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Solution solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode newListNode <span class="token operator">=</span> solution<span class="token punctuation">.</span><span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        curr <span class="token operator">=</span> newListNode<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>val<span class="token operator">+</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode prev <span class="token operator">=</span> null<span class="token punctuation">;</span>        ListNode curr <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode nextTemp <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            curr<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>            prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>            curr <span class="token operator">=</span> nextTemp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. */</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    ListNode next<span class="token punctuation">;</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/01/helloworld/"/>
      <url>/2019/01/01/helloworld/</url>
      
        <content type="html"><![CDATA[<!-- MarkdownTOC autolink="true" autoanchor="false" --><ul><li><a href="#hello%EF%BC%8Cworld">Hello，World!</a></li><li><a href="#%E4%B8%96%E7%95%8C%EF%BC%8C%E4%BD%A0%E5%A5%BD%EF%BC%81">世界，你好！</a></li></ul><!-- /MarkdownTOC --><h2 id="Hello，World"><a href="#Hello，World" class="headerlink" title="Hello，World!"></a>Hello，World!</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="世界，你好！"><a href="#世界，你好！" class="headerlink" title="世界，你好！"></a>世界，你好！</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好, 世界!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技能修炼</title>
      <link href="/2018/11/04/skillsToLearn/"/>
      <url>/2018/11/04/skillsToLearn/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h2><pre class=" language-java"><code class="language-java">JDK 源码<span class="token operator">:</span> <span class="token string">"String"</span> <span class="token string">"HashMap"</span> <span class="token string">"LinkedHashMap"</span> <span class="token string">"HashTable"</span> <span class="token string">"ConcurrentHashMap"</span> <span class="token string">"ArrayList"</span> <span class="token string">"LinkedList"</span></code></pre><h2 id="中间件-框架"><a href="#中间件-框架" class="headerlink" title="中间件/框架"></a>中间件/框架</h2><pre class=" language-java"><code class="language-java">SpringNettyKafkaDubboZookpper</code></pre><h2 id="SQL-NoSQL"><a href="#SQL-NoSQL" class="headerlink" title="SQL/NoSQL"></a>SQL/NoSQL</h2><pre class=" language-java"><code class="language-java">MySqlRedisMongoDB</code></pre><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><pre class=" language-xml"><code class="language-xml">《Java 核心技术：卷1基础知识》《Spring 实战》《Spring Boot实战》《Effective Java》《Java 并发编程实战》《深入理解 Java 虚拟机》《Java 编程思想》《精通 Spring 4.x》</code></pre><pre class=" language-xml"><code class="language-xml">《代码大全》《设计模式》《重构》《代码简洁之道》《领域区域设计》</code></pre><pre class=" language-xml"><code class="language-xml">《高性能 MySQL》《Redis 实战》《MongoDB 权威指南》</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
